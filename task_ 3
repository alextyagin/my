from tensorflow.keras import Sequential
from tensorflow.keras.layers import Conv2D, Flatten, Dense, AveragePooling2D
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras.optimizers import Adam
from sklearn.metrics import accuracy_score
from tensorflow.keras.preprocessing.image import ImageDataGenerator
datagen = ImageDataGenerator(validation_split=0.25,rescale = 1/255)

def load_train(path):
    train_datagen_flow = datagen.flow_from_directory(
    path,
    target_size=(150, 150),
    batch_size=16,
    class_mode='sparse',
    subset='training',
    seed=12345)

    val_datagen_flow = datagen.flow_from_directory(
    path,
    target_size=(150, 150),
    batch_size=16,
    class_mode='sparse',
    subset='validation',
    seed=12345) 

    return train_datagen_flow, val_datagen_flow

def create_model(input_shape, optimizer = Adam(lr=0.001)):
    model = Sequential()
    model.add(Conv2D(filters=6, kernel_size=(3, 3), activation='relu', input_shape=input_shape))
    model.add(AveragePooling2D(pool_size=(2, 2)))
    model.add(Flatten())
    model.add(Dense(units=12, activation='softmax'))
    model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizer, metrics=['acc'])
    return model

def train_model(model, train_data, test_data, epochs=1, batch_size=40, steps_per_epoch=1, validation_steps=1):
    features_train, target_train = train_data
    features_test, target_test = test_data
    model.fit(train_data, validation_data=(test_data), batch_size=batch_size, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps, verbose=2, epochs=epochs, shuffle=True)
    return model
